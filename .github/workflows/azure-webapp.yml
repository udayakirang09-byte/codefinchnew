name: azure-webapp

on:
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AZURE_WEBAPP_NAME: kidzaimathapp30237
      NODE_VERSION: 20.x
      # Injected from GitHub Actions secrets (safe at build time)
      VITE_STRIPE_PUBLIC_KEY: ${{ secrets.VITE_STRIPE_PUBLIC_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # ---------- Build CLIENT (Vite) ----------
      - name: Create client .env.production for Vite
        working-directory: client
        shell: bash
        run: |
          set -eu
          printf "VITE_STRIPE_PUBLIC_KEY=%s\n" "$VITE_STRIPE_PUBLIC_KEY" > .env.production

      - name: Install client deps & build (Vite)
        working-directory: client
        run: |
          npm ci
          npm run build

      - name: Stage client build into server-build/public
        shell: bash
        run: |
          set -eu
          mkdir -p server-build/public
          # IMPORTANT: vite writes to ../dist/public from inside client/, i.e. dist/public at repo root
          rsync -a --delete dist/public/ server-build/public/

      # Sanity check to avoid shipping another "missing key" build
      - name: Verify Stripe key got baked into client bundle
        shell: bash
        run: |
          set -eu
          if grep -R "VITE_STRIPE_PUBLIC_KEY" -n server-build/public 2>/dev/null; then
            echo "Stripe key placeholder still present in bundle."
            exit 1
          fi
          echo "Stripe key baked into client bundle."

      # ---------- Server (TS sources for TSX runtime) ----------
      - name: Install server deps (root)
        working-directory: .
        run: npm ci

      - name: Collect server sources (TS) for TSX runtime
        working-directory: .
        shell: bash
        run: |
          set -eu
          echo "Skipping TS compile; deploying TS sources to run via TSX"
          mkdir -p server-build/server
          rsync -a --delete server/ server-build/server/
          if [ -f tsconfig.json ]; then cp tsconfig.json server-build/; fi

      # ---------- Runtime deps inside server-build ----------
      - name: Install production dependencies into server-build
        shell: bash
        run: |
          set -eu
          mkdir -p server-build
          cp package.json server-build/
          if [ -f package-lock.json ]; then
            cp package-lock.json server-build/
            cd server-build && npm ci --omit=dev
          else
            echo "No package-lock.json found — using npm install fallback"
            cd server-build && npm install --omit=dev
          fi
          # Ensure esbuild’s platform binary is present (safe no-op if OK)
          npx --prefix server-build esbuild --version || (cd server-build && npm rebuild esbuild)
          # Sanity checks: fail build if deps are missing
          test -f server-build/node_modules/tsx/package.json || { echo "tsx missing in deploy package"; exit 1; }
          test -f server-build/node_modules/esbuild/package.json || { echo "esbuild missing in deploy package"; exit 1; }

      # Make tsx (and all runtime deps) available at the app root for `npm start`
      - name: Make runtime node_modules available at app root
        shell: bash
        run: |
          set -eu
          rsync -a --delete server-build/node_modules/ ./node_modules/

      # ---------- Package & Deploy ----------
      - name: Create deployment package (ZIP)
        shell: bash
        run: |
          set -eu
          [ -f server-build/public/index.html ] || { echo "public/index.html missing"; exit 1; }
          [ -f server-build/server/index.ts ] || { echo "server/index.ts missing"; exit 1; }
          cd server-build
          zip -r ../app.zip .

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: app.zip
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}
