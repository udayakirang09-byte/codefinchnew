name: azure-webapp

on:
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AZURE_WEBAPP_NAME: kidzaimathapp30237
      NODE_VERSION: 20.x
      # Injected from GitHub Actions secrets (safe at build time)
      VITE_STRIPE_PUBLIC_KEY: ${{ secrets.VITE_STRIPE_PUBLIC_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # ---------- Build CLIENT (Vite) ----------
      - name: Create client .env.production for Vite
        working-directory: client
        shell: bash
        run: |
          set -eu
          printf "VITE_STRIPE_PUBLIC_KEY=%s\n" "$VITE_STRIPE_PUBLIC_KEY" > .env.production

      - name: Install client deps & build (Vite)
        working-directory: client
        run: |
          npm ci
          npm run build

      - name: Stage client build into server-build/public
        shell: bash
        run: |
          set -eu
          mkdir -p server-build/public
          rsync -a --delete dist/public/ server-build/public/

      # Sanity check to avoid shipping another "missing key" build
      - name: Verify Stripe key got baked into client bundle
        shell: bash
        run: |
          set -eu
          if grep -R "VITE_STRIPE_PUBLIC_KEY" -n server-build/public 2>/dev/null; then
            echo "Stripe key placeholder still present in bundle."
            exit 1
          fi
          echo "Stripe key baked into client bundle."

      # ---------- Build SERVER (TypeScript â†’ JS) ----------
      - name: Install server deps
        working-directory: .
        run: npm ci

      - name: Compile server TypeScript
        working-directory: .
        shell: bash
        run: |
          set -eu
          # Prefer your package script if present; fallback to tsc
          if false; then
            echo skip
          else
            echo "Skipping server TS compile (using server/public runtime JS)"
          fi

          # Make sure compiled JS ends up in ../server-build/server
          cd .
          mkdir -p server-build/server

          # If your server build outputs to server/dist or server/build, copy it over.
          # Adjust if your repo uses a different output folder.
          if [ -d server/public ]; then rsync -a --delete server/public/ server-build/server/public/; fi
          if [ -d server/build ]; then rsync -a --delete server/build/ server-build/server/; fi
          # If compiled JS is in-place (e.g., outDir points directly), copy *.js as a fallback:
          if [ -z "$(ls -A server-build/server)" ]; then
            find server -type f -name '*.js' -not -path 'server-build/*' -exec rsync -R {} server-build/server/ \;
          fi

      # ---------- Runtime deps inside server-build ----------
      - name: Install production dependencies into server-build
        shell: bash
        run: |
          set -eu
          # Copy the root package.json (or server one if you split packages)
          # Use the one your runtime expects. Root is common if it defines "dependencies".
          cp package.json server-build/
          cd server-build
          npm ci --omit=dev

      # ---------- Package & Deploy ----------
      - name: Create deployment package (ZIP)
        shell: bash
        run: |
          set -eu
          cd server-build
          zip -r ../app.zip .

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: app.zip
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}
